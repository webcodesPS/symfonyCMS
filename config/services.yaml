# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    theme: '%env(resolve:THEME)%'
    theme_dir: 'themes/%env(resolve:THEME)%'
    locale: en
    defaults:
        locale: pl
        theme: default
    requirements:
        locale:  pl|en
    mailer_user: 'test@localhost.local'
    sonata.media.admin.media.class: App\Application\Sonata\MediaBundle\Admin\ORM\MediaAdmin

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Application,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Repository\:
        resource: '../src/Repository'
        autowire: true
        tags: ['doctrine.repository_service']

    App\Twig\AppExtension:
        arguments: ["@doctrine", "@request_stack", "@translator"]
        tags: ['twig.extension']

    App\Service\Helper:
        public: true

    App\Utils\:
        resource: '../src/Utils'

    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    gedmo.listener.sortable:
        class: Gedmo\Sortable\SortableListener
        calls:
            - [setAnnotationReader, ['@annotation_reader']]
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    # SONATA ADMIN DACHBOARD GROUPS

    app.admin.page.has.content:
        class: App\Admin\PageHasContentAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Page has content", show_in_dashboard: "false" }
        arguments:
            - ~
            - App\Entity\PageHasContent
#            - 'PixSortableBehaviorBundle:SortableAdmin'
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true


    cms.admin.menu:
        class: App\Admin\MenuAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Menu" }
        arguments:
            - ~
            - App\Entity\Menu
            - App\Controller\Admin\MenuAdminController
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    cms.admin.content.menu:
        class: App\Admin\ContentMenuAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Content" }
        arguments:
            - ~
            - App\Entity\ContentMenu
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true


    cms.admin.page:
        class: App\Admin\PageAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Pages" }
        arguments:
            - ~
            - App\Entity\Page
            - 'PixSortableBehaviorBundle:SortableAdmin'
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    cms.admin.content.page:
        class: App\Admin\ContentPageAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Contents" }
        arguments:
            - ~
            - App\Entity\ContentPage
            # - App\Controller\Admin\ContentPageAdminController
            - 'PixSortableBehaviorBundle:SortableAdmin'
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true


    cms.admin.datalist:
        class: App\Admin\DataListAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Data list" }
        arguments:
            - ~
            - App\Entity\DataList
            - App\Controller\Admin\DataListAdminController
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    cms.admin.media:
        class: "%sonata.media.admin.media.class%"
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Media" }
        arguments:
            - ~
            - App\Application\Sonata\MediaBundle\Entity\Media
            - App\Application\Sonata\MediaBundle\Admin\ORM\MediaAdmin
            - "@sonata.media.pool"
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true


    app.admin.resources.category:
        class: App\Admin\CategoryAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Categories" }
        arguments:
            - ~
            - App\Entity\Category
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    app.admin.resources.collection:
        class: App\Admin\CollectionAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Collections" }
        arguments:
            - ~
            - App\Entity\Collection
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    app.admin.resources.collection.content:
        class: App\Admin\ContentCollectionAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Collection content" }
        arguments:
            - ~
            - App\Entity\ContentCollection
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    app.admin.resources.element:
        class: App\Admin\ElementAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Elements" }
        arguments:
            - ~
            - App\Entity\Element
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true

    app.admin.resources.element.content:
        class: App\Admin\ContentElementAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: "Content", label: "Element content" }
        arguments:
            - ~
            - App\Entity\ContentElement
            - ~
        calls:
            - [ setLabelTranslatorStrategy, ["@sonata.admin.label.strategy.underscore"]]
        public: true